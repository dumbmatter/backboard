db.on('quotaexceeded', cb) tests
  how? the tricky part is how to test propagation from a request

Index.openKeyCursor? maybe skip

Index.getKey

get rid of iterate advance feature. if anyone needs more cursor functions, should implement a more direct translation of cursor API like indexeddb-promised

add getAll to fakeIndexedDB, then use here
  why not use shim?

more concise schema definition, maybe use version as key of object and then the object stores are the value. only tricky part would be that you need to sort the keys before iterating over the schemas and you have to parse the string into a number

what promise library (if any) should be shipped by default?

better way of passing Backboard around to stuff in lib

break up lib/DB.js into multiple files

for bbgm
  need to show user message on quota error. MAKE FUCKING SURE THIS WORKS. i don't want to accidentally cancle propagation of that

better documentation
  iterate arg order
  similar to
    https://github.com/jakearchibald/indexeddb-promised but a bit more idiosyncratic
    dexie
  but slightly nicer API, pluggable promise library, error handling
  feature detection in root.js - abstract into lib function, put in documentation
  limitations
  error handling (ideally.. confirm with test)
    if a request fails, it always aborts the transaction. you can't use event.preventDefault() to commit a transaction while ignoring an error in a request. couldn't figure out a good way to do it, and i don't personally use that feature anyway.
    transaction promise rejects on abort. actual errors should be handled at request level
    db versionchange and quotaexceeded only. you probably do really want to listen to these. versionchange to close, quotaexceeded to do... something

eslint indent won't work because it can't handle double indented function in argument to function that returns promise